// fileHandler.js - Handles file zipping, uploading, email sending, and cleanup

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { google } from 'googleapis';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

const credentials = {
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\n/g, '\n'),
    project_id: process.env.GOOGLE_PROJECT_ID,
};

const auth = new google.auth.JWT({
    email: credentials.client_email,
    key: credentials.private_key,
    scopes: ['https://www.googleapis.com/auth/drive'],
});

const drive = google.drive({ version: 'v3', auth });

function createZip(output, files, password) {
    return new Promise((resolve, reject) => {
        exec(`zip -P "${password}" "${output}" ${files.map(f => `"${f}"`).join(' ')}`, (err) => {
            if (err) reject(err);
            else resolve(output);
        });
    });
}

async function uploadFile(filePath) {
    const fileMetadata = {
        name: path.basename(filePath),
        parents: [process.env.COMPLETED_ORDERS_FOLDER_ID]
    };

    const media = {
        mimeType: 'application/zip',
        body: fs.createReadStream(filePath)
    };

    const file = await drive.files.create({
        resource: fileMetadata,
        media,
        fields: 'id'
    });

    return file.data.id;
}

async function sendEmail(to, subject, link, password, customerName) {
    const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT,
        secure: true,
        auth: {
            user: process.env.BREVO_USER,
            pass: process.env.BREVO_SMTP_KEY
        }
    });

    const html = `<h2>Hi ${customerName}, Your Artwork is Ready! üé®</h2>
              <p><strong>Download Link:</strong> <a href="${link}">Click Here</a></p>
              <p><strong>Password:</strong> ${password}</p>
              <p>‚ö†Ô∏è Please download your files within 24 hours ‚Äî the link will expire after that.</p>
              <p><em>This email was automatically generated by our system. If you have any questions or encounter issues, feel free to contact us directly at info@narrartive.de.</em></p>`;      

    await transporter.sendMail({
        from: 'noreply@narrartive.de',
        to,
        subject,
        html
    });
}

function deleteLocalFiles(files) {
    files.forEach(file => {
        if (fs.existsSync(file)) {
            fs.unlinkSync(file);
        }
    });
}

export { createZip, uploadFile, sendEmail, deleteLocalFiles };
